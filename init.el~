;;;;;;; EVIL MODE ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(require 'package)
(package-initialize)
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("marmalade" . "https://marmalade-repo.org/packages/")
                         ("melpa" . "http://melpa.org/packages/")))
(require 'evil)
(evil-mode 1)

;; Give us back Ctrl+U for vim emulation
(setq evil-want-C-u-scroll t)

;; Save buffers with Ctrl+S
(global-set-key (kbd "C-s") 'evil-write)

;; Escape as universal cance (caps-lock)
(defun minibuffer-keyboard-quit ()
  "Abort recursive edit.
  In Delete Selection mode, if the mark is active, just deactivate it;
  then it takes a second \\[keyboard-quit] to abort the minibuffer."
  (interactive)
  (if (and delete-selection-mode transient-mark-mode mark-active)
    (setq deactivate-mark  t)
    (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
    (abort-recursive-edit)))

(define-key evil-normal-state-map [escape] 'keyboard-quit)
(define-key evil-visual-state-map [escape] 'keyboard-quit)
(define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
(global-set-key [escape] 'evil-exit-emacs-state)

;; Don't display the ugly startup message (particularly ugly in the GUI)
(setq inhibit-startup-message t)

;; Set cursor colors depending on mode
(when (display-graphic-p)
  (setq evil-emacs-state-cursor '("red" box))
  (setq evil-normal-state-cursor '("green" box))
  (setq evil-visual-state-cursor '("orange" box))
  (setq evil-insert-state-cursor '("red" bar))
  (setq evil-replace-state-cursor '("red" bar))
  (setq evil-operator-state-cursor '("red" hollow))
)

;;;;;;;;;; END EVIL MODE ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; No toolbar
(tool-bar-mode -1)

;; No menu-bar
(menu-bar-mode -1)

;; Set default font
(set-default-font "Consolas-11")

;; Get rid of the butt ugly scrollbars in GUI
(when (display-graphic-p) (set-scroll-bar-mode nil))

;; Set default starting directory
(setq default-directory "C:/Users/srki/Desktop/OrgMode/")

;; Theme
;;(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
;;(load-theme 'solarized t)

;; Highlight Current LinE
(require 'hl-line)
(global-hl-line-mode 1)

;; Projectile
(setq projectile-competion-system 'grizzl)
(global-set-key (kbd "C-y") 'projectile-find-file)

;; Ido
(require 'ido)
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)

;; Tab width
(setq-default tab-width 4)

;; Set C style syntax
(setq c-default-style "linux" c-basic-offset 4)

;; Tabs as spaces
(setq-default indent-tabs-mode nil)

;; set C-tab to switch frames
(global-set-key [(control tab)] `other-window)

;; Enable line numbers
(autoload 'linum-mode "linum" "toggle line numbers /on/off" t)
(global-set-key (kbd "C-1") 'linum-mode)
(require 'linum-relative)

;; Auto-complete
(require 'auto-complete)
(require 'auto-complete-config)
;(ac-config-default)
;(defun my:ac-c-header-init()
;  (require 'auto-complete-c-headers)
;  (add-to-list 'ac-sources 'ac-source-c-headers)
;    (add-to-list 'achead:include-directories '"/Applications/Xcode.app/Contents\
;/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include")
;    )
(add-hook 'c++-mode-hook 'my:ac-c-header-init)
(add-hook 'c-mode-hook 'my:ac-c-header-init)

;; Turn on Semantic
;(semantic-mode 1)
;(semantic-add-system-include "/home/srki/source/aventx/include")
;(defun my:add-semantic-to-autocomplete()
;  (add-to-list 'ac-sources 'ac-source-semantic))
;(add-hook 'c-mode-common-hook 'my:add-semantic-to-autocomplete)
;(global-ede-mode 1)
;(ede-cpp-root-project "aventx" :file "~/source/aventx/fcschedd/fcschedd.cc"
;                                    :include-path '("/../include"))

;; auto-pair the brackets, braces, parens.
(require 'autopair)
(autopair-global-mode) ;; enable autopair in all buffers 

;; Yasnippet
;(require 'yasnippet)
;(yas-global-mode 1)

;; Set UNIX encoding to default
(set-default buffer-file-coding-system 'utf-8-unix)
(set-default-coding-systems 'utf-8-unix)
(prefer-coding-system 'utf-8-unix)
(set-default default-buffer-file-coding-system 'utf-8-unix)

;; Default width of fill mode 80 chars
(setq-default fill-column 80)

;; ERC hide status messages
(setq erc-hide-list '("JOIN" "PART" "QUIT"))

;; Always end a file with a newline
(setq require-final-newline t)

;; Disable the bell
(setq visible-bell t)

;; Stop at the end of the file, not just add lines
(setq next-line-add-newlines nil)

;; set up syntax highlighting
(require 'font-lock)
(setq font-lock-mode-maximum-decoration t)

;; Show matching parens
(show-paren-mode)

;; Enable wheelmouse support by default
(require 'mwheel)

;; turn on font-lock mode
(when (fboundp 'global-font-lock-mode)
  (global-font-lock-mode t))

;; enable visual feedback on selections
(setq transient-mark-mode t)

;; Aspell auto spell check
(setq-default ispell-program-name "C:/Program Files (x86)/Aspell/bin/aspell.exe")
(setq text-mode-hook '(lambda() (flyspell-mode t)))

;; Flyspell auto spell check
(dolist (hook '(text-mode-hook))
  (add-hook hook (lambda () (flyspell-mode 1))))
(dolist (hook '(change-log-mode-hook log-edit-mode-hook))
  (add-hook hook (lambda () (flyspell-mode -1))))

(dolist (hook '(org-mode-hook))
  (add-hook hook (lambda () (flyspell-mode 1))))

;; Source code comments flyspell
(add-hook 'c++-mode-hook
          (lambda ()
            (flyspell-prog-mode)
            ; ...
          ))



;;;;;;;;;;;; ORG MODE ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; TODO closing timestamp
(setq org-log-done 'time)

;; Auto-fill-mode for text and org files
(add-hook 'text-mode-hook 'turn-on-auto-fill)
(add-hook 'org-mode-hook 'turn-on-auto-fill)

;; Org-Mode
;; Standard key bindings
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)

;; To do keywords as workflow states
(setq org-todo-keywords
      '((sequence "TODO" "IN PROGRESS" "HOLD" "|" "DONE" "CANCELLED")))
             
(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "red" :weight bold)
              ("IN PROGRESS" :foreground "orange" :weight bold)
              ("DONE" :foreground "forest green" :weight bold)
              ("HOLD" :foreground "magenta" :weight bold)
              ("CANCELLED" :foreground "forest green" :weight bold))))
			  
;; Org-mode capture settings
(setq org-default-notes-file "c:/Users/srki/OrgMode/notes.org")
(define-key global-map "\C-cc" 'org-capture)

;; Org-mode source code syntax highlighting
;;(require 'org-latex)
;;(setq org-export-latex-listings 'minted)
;;(add-to-list 'org-export-latex-packages-alist '("" "minted"))
;;(setq org-src-fontify-natively t)
;;;;;;;;; END ORG MODE ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; default to better frame titles
(setq frame-title-format
      (concat  "%b - emacs@" system-name))
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-names-vector ["#212526" "#ff4b4b" "#b4fa70" "#fce94f" "#729fcf" "#ad7fa8" "#8cc4ff" "#eeeeec"])
 ;;'(custom-enabled-themes (quote (solarized-dark)))
 '(custom-safe-themes (quote ("8aebf25556399b58091e533e455dd50a6a9cba958cc4ebb0aab175863c25b9a4" default)))
 '(org-agenda-span (quote month))
 '(send-mail-function (quote mailclient-send-it))
 '(user-full-name "Srki Rakic")
 '(user-mail-address "srki@strsoftware.com"))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
